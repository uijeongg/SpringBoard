<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans   
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context   
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<context:component-scan base-package="kr.ac.kopo" />
    <mvc:annotation-driven />
	<mvc:default-servlet-handler />
	<mvc:view-resolvers>
		<mvc:jsp prefix="/WEB-INF/jsp/" suffix=".jsp" />
	</mvc:view-resolvers>
	
	
	<!-- db연결 -->
	<!-- <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close"> -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
	<!-- 끝날 땐 이 안에 있는 클로즈를 실행 -->
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"></property>
		<property name="url" value="jdbc:oracle:thin:@193.123.234.108:1521:orclcdb"></property>
		<property name="username" value="scott"></property>
		<property name="password" value="tiger"></property>
	</bean>


	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="mapperLocations"
			value="classpath:config/sqlmapper/oracle/*.xml" />
		<property name="configLocation"
			value="classpath:config/mybatis/mybatisConfig.xml" />
	</bean>

	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory"></constructor-arg>
	</bean>
	
	
	

	<!-- interceptor를 사용해주기 위해 interceptor bean 만들어주기 -->
	<bean id="loginInterceptor" class="kr.ac.kopo.interceptor.LoginInterceptor"></bean>
	
	<!-- 이걸 가져다가 인터셉터로 동작을 해줘! 콘솔에 프리핸들러 포스트핸들러 등 한 동작씩 찍힐것 이거 돌리면 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**/" />  <!-- 밑에 있는 모든 하위 폴더들을 몽땅 다 -->
			<mvc:exclude-mapping path="/login" /> <!-- 로그인을 해야만 게시글 같은거 볼 수 있게 해줄거야 -->
			<mvc:exclude-mapping path="/resource/**" />
			<mvc:exclude-mapping path="/board" /> <!-- 게시판 볼 수 있게 해줄게 -->
			<mvc:exclude-mapping path="/member/resister" />
			<ref bean="loginInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>
	
	<!-- 로그인 안한애가 들어오면 로그인페이지로 이동하도록 만들어주자! -->

	
	
	<!-- 메일 보내기 api -->
	   <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
      <property name="host" value="smtp.gmail.com" />
      <property name="port" value="587" />
      <property name="username" value="uijeong970929@gmail.com" />
      <property name="password" value="iouwvzbdbpcmoizi" />
      <property name="javaMailProperties">
         <props>
                <prop key="mail.transport.protocol">smtp</prop>
                <prop key="mail.smtp.auth">true</prop>
                <!-- gmail의 경우 보안문제 업데이트로 인해 SSLSocketFactory를 추가해야 smtp 사용 가능. -->
                <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
                <prop key="mail.smtp.starttls.enable">true</prop>
                <prop key="mail.debug">true</prop>
                <prop key="mail.smtp.ssl.trust">smtp.gmail.com</prop>
            <prop key="mail.smtp.ssl.protocols">TLSv1.2</prop>
            </props>
      </property>  
   </bean>
	
	





</beans>